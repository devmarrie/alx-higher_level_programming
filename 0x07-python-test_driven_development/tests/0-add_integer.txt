Given the add function ``add_integer(a,b=98)`` , it returns the sum of the two numbers listed
::
   >>> add_integer = __import__('0-add_integer').add_integer
   >>> add_integer(2,2)  
   4

Working with negative values
::
   >>> add_integer(2, -4)
   -2

Working with floating point values
::
   >>> add_integer(2.0, 3.0)
   5

Casting floats to integers before addition
:: 
   >>> add_integer(2.6, 3)
   5

   
If either argument is a non-integer and non-float, a TypeError is raised:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError message is only
printed for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will fail if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
     

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

And again with NaN numbers.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer


